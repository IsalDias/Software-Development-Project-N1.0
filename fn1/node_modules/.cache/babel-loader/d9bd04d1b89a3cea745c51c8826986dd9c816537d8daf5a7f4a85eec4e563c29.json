{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Isal Laksika\\\\Downloads\\\\projectfinal\\\\fn1\\\\src\\\\pages\\\\Customer\\\\Customer_registration\\\\Cust_reg.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { Button, Col, Row } from 'react-bootstrap';\nimport './cust_reg.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Cust_reg() {\n  _s();\n  const [formData, setFormData] = useState({\n    firstName: '',\n    lastName: '',\n    phoneNumber: '',\n    email: '',\n    address: '',\n    gender: '',\n    birthday: '',\n    nicNumber: '',\n    occupation: '',\n    password: '',\n    reenterPassword: '',\n    isChecked: false\n  });\n  const [formErrors, setFormErrors] = useState({\n    firstName: '',\n    lastName: '',\n    phoneNumber: '',\n    email: '',\n    nicNumber: '',\n    reenterPassword: ''\n  });\n  const validateField = (name, value) => {\n    let error = '';\n\n    // Check if the field is empty\n    if (!value) {\n      error = 'This field is required.';\n    } else {\n      // Perform field-specific validation\n      switch (name) {\n        case 'email':\n          // Validate email format\n          const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n          if (!emailRegex.test(value)) {\n            error = 'Invalid email format.';\n          }\n          break;\n        case 'phoneNumber':\n          // Validate phone number (Sri Lankan format: XXXXXXXXXX)\n          const phoneRegex = /^[0-9]{10}$/;\n          if (!phoneRegex.test(value)) {\n            error = 'Invalid phone number format.';\n          }\n          break;\n        case 'nicNumber':\n          // Validate NIC number (Sri Lankan format: XXXXXXXXXXV)\n          const nicRegex = /^[0-9]{9}[Vv]$/;\n          if (!nicRegex.test(value)) {\n            error = 'Invalid NIC number format.';\n          }\n          break;\n        default:\n          break;\n      }\n    }\n    setFormErrors(prevState => ({\n      ...prevState,\n      [name]: error\n    }));\n  };\n  const handleChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setFormData(prevState => ({\n      ...prevState,\n      [name]: value\n    }));\n\n    // Validate the current field\n    validateField(name, value);\n\n    // Check if the field is password or reenterPassword\n    if (name === 'password' || name === 'reenterPassword') {\n      // Validate if password and reenterPassword match\n      const password = name === 'password' ? value : formData.password;\n      const reenterPassword = name === 'reenterPassword' ? value : formData.reenterPassword;\n      if (password === reenterPassword) {\n        setFormErrors(prevState => ({\n          ...prevState,\n          reenterPassword: ''\n        }));\n      } else {\n        setFormErrors(prevState => ({\n          ...prevState,\n          reenterPassword: 'Passwords do not match.'\n        }));\n      }\n    }\n  };\n  const handleCheckChange = e => {\n    const {\n      checked\n    } = e.target;\n    setFormData(prevState => ({\n      ...prevState,\n      isChecked: checked\n    }));\n  };\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    // Perform overall form validation\n    const isValid = Object.values(formErrors).every(error => !error);\n    const isCheckValid = formData.isChecked;\n    if (isValid && isCheckValid) {\n      // Perform form submission or further processing here\n      console.log('Form is valid. Submitting...');\n    } else {\n      console.log('Form contains errors. Please fix them.');\n    }\n  };\n  const handleCheck = e => {\n    e.preventDefault();\n    console.log('Check button clicked');\n    // Add your logic for checking here\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"form-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"form-heading\",\n      children: \"Customer Registration Form\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: /*#__PURE__*/_jsxDEV(Row, {\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          style: {\n            width: \"10%\"\n          },\n          onClick: handleCheck,\n          children: \"Check\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          style: {\n            width: \"10%\"\n          },\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 130,\n    columnNumber: 5\n  }, this);\n}\n_s(Cust_reg, \"8/GXJ1AP681LaH0LM3zpjCpJ0+U=\");\n_c = Cust_reg;\nexport default Cust_reg;\nvar _c;\n$RefreshReg$(_c, \"Cust_reg\");","map":{"version":3,"names":["React","useState","Button","Col","Row","jsxDEV","_jsxDEV","Cust_reg","_s","formData","setFormData","firstName","lastName","phoneNumber","email","address","gender","birthday","nicNumber","occupation","password","reenterPassword","isChecked","formErrors","setFormErrors","validateField","name","value","error","emailRegex","test","phoneRegex","nicRegex","prevState","handleChange","e","target","handleCheckChange","checked","handleSubmit","preventDefault","isValid","Object","values","every","isCheckValid","console","log","handleCheck","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","style","width","onClick","_c","$RefreshReg$"],"sources":["C:/Users/Isal Laksika/Downloads/projectfinal/fn1/src/pages/Customer/Customer_registration/Cust_reg.jsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { Button, Col, Row } from 'react-bootstrap';\r\nimport './cust_reg.css';\r\n\r\nfunction Cust_reg() {\r\n  const [formData, setFormData] = useState({\r\n    firstName: '',\r\n    lastName: '',\r\n    phoneNumber: '',\r\n    email: '',\r\n    address: '',\r\n    gender: '',\r\n    birthday: '',\r\n    nicNumber: '',\r\n    occupation: '',\r\n    password: '',\r\n    reenterPassword: '',\r\n    isChecked: false\r\n  });\r\n\r\n  const [formErrors, setFormErrors] = useState({\r\n    firstName: '',\r\n    lastName: '',\r\n    phoneNumber: '',\r\n    email: '',\r\n    nicNumber: '',\r\n    reenterPassword: ''\r\n  });\r\n\r\n  const validateField = (name, value) => {\r\n    let error = '';\r\n\r\n    // Check if the field is empty\r\n    if (!value) {\r\n      error = 'This field is required.';\r\n    } else {\r\n      // Perform field-specific validation\r\n      switch (name) {\r\n        case 'email':\r\n          // Validate email format\r\n          const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n          if (!emailRegex.test(value)) {\r\n            error = 'Invalid email format.';\r\n          }\r\n          break;\r\n        case 'phoneNumber':\r\n          // Validate phone number (Sri Lankan format: XXXXXXXXXX)\r\n          const phoneRegex = /^[0-9]{10}$/;\r\n          if (!phoneRegex.test(value)) {\r\n            error = 'Invalid phone number format.';\r\n          }\r\n          break;\r\n        case 'nicNumber':\r\n          // Validate NIC number (Sri Lankan format: XXXXXXXXXXV)\r\n          const nicRegex = /^[0-9]{9}[Vv]$/;\r\n          if (!nicRegex.test(value)) {\r\n            error = 'Invalid NIC number format.';\r\n          }\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n    }\r\n\r\n    setFormErrors((prevState) => ({\r\n      ...prevState,\r\n      [name]: error\r\n    }));\r\n  };\r\n\r\n  const handleChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setFormData((prevState) => ({\r\n      ...prevState,\r\n      [name]: value\r\n    }));\r\n\r\n    // Validate the current field\r\n    validateField(name, value);\r\n\r\n    // Check if the field is password or reenterPassword\r\n    if (name === 'password' || name === 'reenterPassword') {\r\n      // Validate if password and reenterPassword match\r\n      const password = name === 'password' ? value : formData.password;\r\n      const reenterPassword = name === 'reenterPassword' ? value : formData.reenterPassword;\r\n      if (password === reenterPassword) {\r\n        setFormErrors((prevState) => ({\r\n          ...prevState,\r\n          reenterPassword: ''\r\n        }));\r\n      } else {\r\n        setFormErrors((prevState) => ({\r\n          ...prevState,\r\n          reenterPassword: 'Passwords do not match.'\r\n        }));\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleCheckChange = (e) => {\r\n    const { checked } = e.target;\r\n    setFormData((prevState) => ({\r\n      ...prevState,\r\n      isChecked: checked\r\n    }));\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n\r\n    // Perform overall form validation\r\n    const isValid = Object.values(formErrors).every((error) => !error);\r\n    const isCheckValid = formData.isChecked;\r\n\r\n    if (isValid && isCheckValid) {\r\n      // Perform form submission or further processing here\r\n      console.log('Form is valid. Submitting...');\r\n    } else {\r\n      console.log('Form contains errors. Please fix them.');\r\n    }\r\n  };\r\n\r\n  const handleCheck = (e) => {\r\n    e.preventDefault();\r\n    console.log('Check button clicked');\r\n    // Add your logic for checking here\r\n  };\r\n\r\n  return (\r\n    <div className=\"form-container\">\r\n      <h2 className=\"form-heading\">Customer Registration Form</h2>\r\n\r\n      <form onSubmit={handleSubmit}>\r\n        {/* Rest of your code */}\r\n        \r\n        <Row>\r\n          <button type=\"button\" style={{width:\"10%\"}} onClick={handleCheck}>Check</button>\r\n          <button type=\"submit\" style={{width:\"10%\"}}>Submit</button>\r\n        </Row>\r\n        \r\n        {/* Rest of your code */}\r\n        \r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Cust_reg;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}